J2_IMPORTS = """# Created by scrape-schema codegen
#
# WARNING: Any manual changes made to this file will be lost when generator is
# run again.  Do not edit this file unless you know what you are doing.

from typing import Dict, Union, Any
import re

from parsel import Selector, SelectorList
import chompjs
"""

J2_CLASS = '''{{imports}}

class {{ schema_name }}:
    def __init__(self):
        self.__scope: Dict[str, Any] = {}

    @staticmethod
    def _prepare_markup(markup: Union[str, bytes, Selector, SelectorList]):
        if isinstance(markup, str):
            return Selector(markup)
        elif isinstance(markup, bytes):
            return Selector(body=markup)
        elif isinstance(markup, (Selector, SelectorList)):
            return markup
        msg = (f'markup should be [str, bytes, Selector, SelectorList], '
               f'not {type(markup).__name__}')
        raise TypeError(msg)

    def parse(self, markup: Union[str, bytes, Selector, SelectorList]) -> Dict[str, Any]:
        markup = self._prepare_markup(markup)
        return { {% for name, value in methods_meta.items() %}
            {{ name }}: {{ value }},{% endfor %}
            }

    @property
    def cache(self) -> Dict[str, Any]:
        """get last parsed data"""
        return self.__scope{% for method_code in methods_code %}
        {{ method_code|indent(4, True) }}{% endfor %}
'''

J2_CLASS_METHOD_NAME = "__parse_{{ name }}"

J2_CLASS_METHOD = '''
def {{ method_name }}(self, markup: Union[Selector, SelectorList]) -> Any:
    """{{ doc }}"""
    name = {{ name }}
    default = {{ default }}
    try:
        {{ first_step }}{% for step in steps %}
        {{ step }}{% endfor %}
    except Exception as exc:
        if default is Ellipsis:
            raise exc
        result = default
    self.__scope[name] = result
    return result
'''

# parsel.Selector methods
J2_METHOD_FIRST_STEP = "result = markup.{{ expr }}"
J2_METHOD_SELECTOR_STEP = "result = result.{{ expr }}"
J2_METHOD_SELECTOR_RE = "result = result.re({{ regex }}, {{ replace_entities }})"

# special methods
J2_STEP_METHOD_GETITEM = "result = result[{{ arg }}]"
J2_STEP_METHOD_CONCAT_L = "result = {{arg}} + result"
J2_STEP_METHOD_CONCAT_R = "result =  result + {{arg}}"
J2_STEP_METHOD_REPLACE = "result = result.replace({{ old }}, {{ new }}, {{ count }})"
J2_STEP_METHOD_FN = """
def func_{{ rnd_hash }}(result):
    {{ fn_code }}

result = func(result)
"""
J2_STEP_METHOD_FN_LAMBDA = "result = lambda r: {{code}}(result)"
J2_STEP_METHOD_RE_SEARCH = "result = re.search({{ pattern }}, result, flags={{flag}})"
J2_STEP_METHOD_RE_SEARCH_GROUP_DICT = (
    "result = re.search({{ pattern }}, result, {{flag}}).groupdict()"
)
J2_STEP_METHOD_FINDALL = (
    "result = [r for r in re.finditer({{ pattern }}, result, {{ flag }})]"
)
J2_STEP_METHOD_FINDALL_GROUP_DICT = (
    "result = [r.groupdict() for r in re.finditer({{ pattern}}, result, {{ flag }})]"
)
J2_STEP_METHOD_CHOMP_JS_PARSE = (
    "result = chompjs.parse_js_object(result, unicode_escape={{ unicode_escape }}, "
    "json_params={{ json_params }})"
)
J2_STEP_METHOD_CHOMP_JS_PARSE_ALL = (
    "result = chompjs.parse_js_objects(result, unicode_escape={{ unicode_escape }},"
    "omitempty={{ omitempty }}, json_params={{ json_params }})"
)
